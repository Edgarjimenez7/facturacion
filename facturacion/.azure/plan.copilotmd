# Azure Deployment Plan for FacturacionAPI Project

## **Goal**
Deploy a complete billing system (.NET Core 6 Web API + HTML/CSS/JS frontend) to Azure Web App Service using Azure Developer CLI (AZD).

## **Project Information**
**AppName**: FacturacionAPI
- **Technology Stack**: .NET Core 6 Web API with Entity Framework Core
- **Database**: SQLite (will migrate to Azure SQL Database for production)
- **Frontend**: Vanilla HTML/CSS/JavaScript with modern responsive design
- **Features**: Complete billing system with products, customers, invoices, and reports
- **Dependencies**: Entity Framework Core, Swagger/OpenAPI, CORS enabled
- **Hosting Recommendation**: Azure Web App Service for scalable, managed hosting

## **Azure Resources Architecture**
> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    User[ðŸ‘¤ Users] --> CDN[Azure CDN]
    CDN --> WebApp[Azure Web App<br/>FacturacionAPI]
    WebApp --> SQL[Azure SQL Database<br/>facturacion-db]
    WebApp --> KV[Key Vault<br/>Secrets & Connection Strings]
    WebApp --> AI[Application Insights<br/>Monitoring & Logs]
    AI --> LAW[Log Analytics Workspace]
    
    subgraph "Azure Resource Group"
        WebApp
        SQL
        KV
        AI
        LAW
        CDN
    end
```

**Data Flow:**
- Users access the frontend through Azure CDN for optimal performance
- The Web App serves both the .NET API and static frontend files
- The Web App connects to Azure SQL Database for data storage and retrieval
- Connection strings and secrets are securely stored in Key Vault
- Application Insights monitors performance and logs application telemetry

## **Recommended Azure Resources**

**Application Hosting:**
- **FacturacionAPI Web App**
  - **Hosting Service Type**: Azure Web App Service
  - **SKU**: B1 Basic (1 vCPU, 1.75GB RAM) - Ideal for small business applications
  - **Configuration**:
    - Language: dotnet (6.0)
    - Runtime Stack: .NET 6 (LTS)
    - Environment Variables:
      - `ConnectionStrings__DefaultConnection`: Azure SQL connection string
      - `ASPNETCORE_ENVIRONMENT`: Production
      - `WEBSITE_RUN_FROM_PACKAGE`: 1

**Dependencies:**
- **Azure SQL Database**
  - **SKU**: Basic (5 DTU, 2GB storage) - Cost-effective for small applications
  - **Service Type**: Azure SQL Database
  - **Connection Type**: Connection string via Key Vault
  - **Environment Variables**: 
    - `ConnectionStrings__DefaultConnection`: SQL connection string

**Supporting Services:**
- **Application Insights**: Performance monitoring and application telemetry
- **Log Analytics Workspace**: Centralized logging for all services
- **Key Vault**: Secure storage for connection strings and secrets
- **Azure CDN** (Optional): Content delivery network for frontend assets

**Security Configurations:**
- **Managed Identity**: System-assigned identity for the Web App
- **Key Vault Access Policy**: Web App managed identity has Get/List permissions for secrets
- **SQL Database**: Firewall configured to allow Azure services
- **HTTPS Only**: Enforce HTTPS for all connections

## **Execution Steps**
> **Below are the steps for Copilot to follow; ask Copilot to update or execute this plan.**

### 1. Prepare Application for Deployment
1. Update connection string configuration for Azure SQL Database
2. Configure CORS for production domain
3. Update frontend API endpoints for production
4. Create deployment package

### 2. Provision Azure Infrastructure And Deploy Application
1. Initialize Azure Developer CLI (AZD) project
2. Generate Bicep templates for required Azure resources
3. Configure application settings and environment variables  
4. Run `azd up` to provision resources and deploy application
5. Verify deployment and test application functionality

### 3. Post-Deployment Configuration
1. Configure custom domain (optional)
2. Set up SSL certificate
3. Configure monitoring and alerts
4. Perform load testing and optimization

### 4. Summary and Documentation
1. Document deployment process and resource configuration
2. Create monitoring dashboard
3. Provide maintenance and scaling guidelines

---

**Estimated Deployment Time**: 15-20 minutes
**Monthly Cost Estimate**: $15-25 USD (Basic tier resources)